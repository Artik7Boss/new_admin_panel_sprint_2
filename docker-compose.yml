version: '3.8' 

# То из чего будет собираться Docker.
services:
  django:
    build:
      context: .
    # Когда какая-то ПАПКА из локальной машины перекидывается в Docker.
    # То есть, все изменения, которые мы делаем локально, то все изменения сразу оказываются внутри контейнера.
    volumes:
      - "./movies_admin:/movies_admin"
    # Необходимо для соединения контейнера Django с контейнером Database.
    env_file:
      - "movies_admin/config/.env"
    # Не запускать контейнер с Django пока не соберется контейнер с PostgreSQL.
    depends_on:
      - database
      - elasticsearch
  
  # Не нужно создавать свой собственный image, берем стандартный с Docker Hub.
  database:

    image: postgres:16

    environment:
      - DB_NAME=movies_database
      - DB_USER=app
      - DB_PASSWORD=123qwe
    
    # перебрасываем существующую бд, созданную в другом docker контейнере в новый контейнер
    volumes:
      - $HOME/postgresql/data:/var/lib/postgresql/data
  
  # создаем контейнер nginx из готово образа и прикручиваем измененный конфиг
  # копируем статику из корневого каталога джанго (необходимо создать папку staticfiles перед контейнеризацией) в /etc/nginx/
  # тут скопировали только статику админки, так как на конце указали admin
  nginx:
    image: nginx:latest
    volumes:
      - "./nginx/nginx.conf:/etc/nginx/nginx.conf"
      - "./nginx/default.conf:/etc/nginx/conf.d/default.conf"
      - "./movies_admin/movies_admin/staticfiles/admin:/etc/nginx/movies_admin/movies_admin/staticfiles/admin"
      - "./movies_admin/movies_admin/staticfiles/rest_framework:/etc/nginx/movies_admin/movies_admin/staticfiles/rest_framework"
    ports:
      - "80:80"
    depends_on:
      - django
  
  elasticsearch:
    image: elasticsearch:8.13.0
    container_name: elasticsearch
    environment:
      - "ES_JAVA_OPTS=-Xms200m -Xmx200m"
      - discovery.type=single-node
      - xpack.security.enabled=false
    ports:
      - 9200:9200
  
